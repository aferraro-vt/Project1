#summary(dr2iff)
splitOccasion <- split(dr2iff, f=factor(dr2iff$DR2_030Z))
breakfastOccasion <- splitOccasion$"1"
lunchOccasion <- splitOccasion$"2"
dinnerOccasion <- splitOccasion$"3"
cleaned_dr2iff <- dr2iff[dr2iff$DR2_030Z <= 2, ]
cleaned_dr2iff <- cleaned_dr2iff %>% filter(!is.na(DR2ISUGR) & !is.na(DR2ITFAT) & !is.na(DR2ICHOL) & !is.na(DR2_030Z) & !is.na(DR2IGRMS))
amount_80 <- nrow(cleaned_dr2iff) * 0.80
indexes <- seq_len(nrow(cleaned_dr2iff))
train_indexes <- sample(indexes, size=amount_80)
train_set_80 <- cleaned_dr2iff[train_indexes, ]
test_set_20  <- cleaned_dr2iff[-train_indexes, ]
ggplot(cleaned_dr2iff, aes(x=DR2ICHOL, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + scale_color_discrete(name = "Original Data", labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 1
#Import Libraries
library(haven)
library(ggplot2)
library(FNN)
library(dplyr)
library(plotly)
library(plyr)
library(GGally)
library(flexdashboard)
set.seed(145)
# Import file
dr2iff <- read_xpt("DR2IFF_I.xpt")
#summary(dr2iff)
splitOccasion <- split(dr2iff, f=factor(dr2iff$DR2_030Z))
breakfastOccasion <- splitOccasion$"1"
lunchOccasion <- splitOccasion$"2"
dinnerOccasion <- splitOccasion$"3"
cleaned_dr2iff <- dr2iff[dr2iff$DR2_030Z <= 2, ]
cleaned_dr2iff <- cleaned_dr2iff %>% filter(!is.na(DR2ISUGR) & !is.na(DR2ITFAT) & !is.na(DR2ICHOL) & !is.na(DR2_030Z) & !is.na(DR2IGRMS))
amount_80 <- nrow(cleaned_dr2iff) * 0.80
indexes <- seq_len(nrow(cleaned_dr2iff))
train_indexes <- sample(indexes, size=amount_80)
train_set_80 <- cleaned_dr2iff[train_indexes, ]
test_set_20  <- cleaned_dr2iff[-train_indexes, ]
temp_cleaned_dr2iff <- cleaned_dr2iff
temp_cleaned_dr2iff$DR2_030Z <- as.factor(temp_cleaned_dr2iff$DR2_030Z)
ggplot(temp_cleaned_dr2iff, aes(x=DR2ICHOL, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + scale_color_discrete(name = "Original Data", labels = c("Breakfast", "Lunch")) # New legend values
ggplot(temp_cleaned_dr2iff, aes(x=DR2ITFAT, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + scale_color_discrete(name = "Original Data", labels = c("Breakfast", "Lunch")) # New legend values
ggplot(temp_cleaned_dr2iff, aes(x=DR2ISUGR, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + scale_color_discrete(name = "Original Data", labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 2
train_features <- train_set_80[, c("DR2ICHOL","DR2IGRMS","DR2ISUGR","DR2ITFAT")]
test_features <- test_set_20[, c("DR2ICHOL","DR2IGRMS","DR2ISUGR","DR2ITFAT")]
train_classes <- train_set_80$DR2_030Z
test_classes <- test_set_20$DR2_030Z
knn_classes_output <- knn(train=train_features, test=test_features, cl=train_classes, k=5)
confusion_mat <- table("Predicted Classes" = knn_classes_output, "Actual Classes" = test_classes)
#sum(knn_classes_output == test_classes) / length(test_classes)
#ggplot(test_set_20, aes(x=DR2ICHOL, y=DR2IGRMS, col=knn_classes_output)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + labs(col = "New Legend Name")
ggplot(test_set_20, aes(x=DR2ICHOL, y=DR2IGRMS, col=knn_classes_output)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + scale_color_discrete(
name = "Predict Class",
labels = c("Breakfast", "Lunch") # New legend values
)
# Chunk 3
temp_test_set_20 <- test_set_20
temp_test_set_20$DR2_030Z <- as.factor(temp_test_set_20$DR2_030Z)
ggplot(temp_test_set_20, aes(x=DR2ICHOL, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + scale_color_discrete(
name = "Actual  Class",
labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 4
# Chunk 5
# Chunk 1
#Import Libraries
library(haven)
library(ggplot2)
library(FNN)
library(dplyr)
library(plotly)
library(plyr)
library(GGally)
library(flexdashboard)
set.seed(145)
# Import file
dr2iff <- read_xpt("DR2IFF_I.xpt")
#summary(dr2iff)
splitOccasion <- split(dr2iff, f=factor(dr2iff$DR2_030Z))
breakfastOccasion <- splitOccasion$"1"
lunchOccasion <- splitOccasion$"2"
dinnerOccasion <- splitOccasion$"3"
cleaned_dr2iff <- dr2iff[dr2iff$DR2_030Z <= 2, ]
cleaned_dr2iff <- cleaned_dr2iff %>% filter(!is.na(DR2ISUGR) & !is.na(DR2ITFAT) & !is.na(DR2ICHOL) & !is.na(DR2_030Z) & !is.na(DR2IGRMS))
amount_80 <- nrow(cleaned_dr2iff) * 0.80
indexes <- seq_len(nrow(cleaned_dr2iff))
train_indexes <- sample(indexes, size=amount_80)
train_set_80 <- cleaned_dr2iff[train_indexes, ]
test_set_20  <- cleaned_dr2iff[-train_indexes, ]
temp_cleaned_dr2iff <- cleaned_dr2iff
temp_cleaned_dr2iff$DR2_030Z <- as.factor(temp_cleaned_dr2iff$DR2_030Z)
ggplot(temp_cleaned_dr2iff, aes(x=DR2ICHOL, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + scale_color_discrete(name = "Original Data", labels = c("Breakfast", "Lunch")) # New legend values
ggplot(temp_cleaned_dr2iff, aes(x=DR2ITFAT, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 100) + ylim(0, 1000) + scale_color_discrete(name = "Original Data", labels = c("Breakfast", "Lunch")) # New legend values
ggplot(temp_cleaned_dr2iff, aes(x=DR2ISUGR, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 100) + ylim(0, 1000) + scale_color_discrete(name = "Original Data", labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 2
train_features <- train_set_80[, c("DR2ICHOL","DR2IGRMS","DR2ISUGR","DR2ITFAT")]
test_features <- test_set_20[, c("DR2ICHOL","DR2IGRMS","DR2ISUGR","DR2ITFAT")]
train_classes <- train_set_80$DR2_030Z
test_classes <- test_set_20$DR2_030Z
knn_classes_output <- knn(train=train_features, test=test_features, cl=train_classes, k=5)
confusion_mat <- table("Predicted Classes" = knn_classes_output, "Actual Classes" = test_classes)
#sum(knn_classes_output == test_classes) / length(test_classes)
#ggplot(test_set_20, aes(x=DR2ICHOL, y=DR2IGRMS, col=knn_classes_output)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + labs(col = "New Legend Name")
ggplot(test_set_20, aes(x=DR2ICHOL, y=DR2IGRMS, col=knn_classes_output)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + scale_color_discrete(
name = "Predict Class",
labels = c("Breakfast", "Lunch") # New legend values
)
# Chunk 3
temp_test_set_20 <- test_set_20
temp_test_set_20$DR2_030Z <- as.factor(temp_test_set_20$DR2_030Z)
ggplot(temp_test_set_20, aes(x=DR2ICHOL, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + scale_color_discrete(
name = "Actual  Class",
labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 4
# Chunk 5
# Chunk 1
#Import Libraries
library(haven)
library(ggplot2)
library(FNN)
library(dplyr)
library(plotly)
library(plyr)
library(GGally)
library(flexdashboard)
library(knitr)
set.seed(145)
# Import file
dr2iff <- read_xpt("DR2IFF_I.xpt")
#summary(dr2iff)
splitOccasion <- split(dr2iff, f=factor(dr2iff$DR2_030Z))
breakfastOccasion <- splitOccasion$"1"
lunchOccasion <- splitOccasion$"2"
dinnerOccasion <- splitOccasion$"3"
cleaned_dr2iff <- dr2iff[dr2iff$DR2_030Z <= 2, ]
cleaned_dr2iff <- cleaned_dr2iff %>% filter(!is.na(DR2ISUGR) & !is.na(DR2ITFAT) & !is.na(DR2ICHOL) & !is.na(DR2_030Z) & !is.na(DR2IGRMS))
amount_80 <- nrow(cleaned_dr2iff) * 0.80
indexes <- seq_len(nrow(cleaned_dr2iff))
train_indexes <- sample(indexes, size=amount_80)
train_set_80 <- cleaned_dr2iff[train_indexes, ]
test_set_20  <- cleaned_dr2iff[-train_indexes, ]
temp_cleaned_dr2iff <- cleaned_dr2iff
temp_cleaned_dr2iff$DR2_030Z <- as.factor(temp_cleaned_dr2iff$DR2_030Z)
ggplot(temp_cleaned_dr2iff, aes(x=DR2ICHOL, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + scale_color_discrete(name = "Original Data", labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 2
ggplot(temp_cleaned_dr2iff, aes(x=DR2ITFAT, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 100) + ylim(0, 1000) + scale_color_discrete(name = "Original Data", labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 3
ggplot(temp_cleaned_dr2iff, aes(x=DR2ISUGR, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 100) + ylim(0, 1000) + scale_color_discrete(name = "Original Data", labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 4
train_features <- train_set_80[, c("DR2ICHOL","DR2IGRMS","DR2ISUGR","DR2ITFAT")]
test_features <- test_set_20[, c("DR2ICHOL","DR2IGRMS","DR2ISUGR","DR2ITFAT")]
train_classes <- train_set_80$DR2_030Z
test_classes <- test_set_20$DR2_030Z
knn_classes_output <- knn(train=train_features, test=test_features, cl=train_classes, k=5)
confusion_mat <- table("Predicted Classes" = knn_classes_output, "Actual Classes" = test_classes)
#sum(knn_classes_output == test_classes) / length(test_classes)
#ggplot(test_set_20, aes(x=DR2ICHOL, y=DR2IGRMS, col=knn_classes_output)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + labs(col = "New Legend Name")
ggplot(test_set_20, aes(x=DR2ICHOL, y=DR2IGRMS, col=knn_classes_output)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + scale_color_discrete(
name = "Predict Class",
labels = c("Breakfast", "Lunch") # New legend values
)
# Chunk 5
temp_test_set_20 <- test_set_20
temp_test_set_20$DR2_030Z <- as.factor(temp_test_set_20$DR2_030Z)
ggplot(temp_test_set_20, aes(x=DR2ICHOL, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + scale_color_discrete(
name = "Actual  Class",
labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 6
kable(confusion_mat)
# Chunk 1
#Import Libraries
library(haven)
library(ggplot2)
library(FNN)
library(dplyr)
library(plotly)
library(plyr)
library(GGally)
library(flexdashboard)
library(knitr)
set.seed(145)
# Import file
dr2iff <- read_xpt("DR2IFF_I.xpt")
#summary(dr2iff)
splitOccasion <- split(dr2iff, f=factor(dr2iff$DR2_030Z))
breakfastOccasion <- splitOccasion$"1"
lunchOccasion <- splitOccasion$"2"
dinnerOccasion <- splitOccasion$"3"
cleaned_dr2iff <- dr2iff[dr2iff$DR2_030Z <= 2, ]
cleaned_dr2iff <- cleaned_dr2iff %>% filter(!is.na(DR2ISUGR) & !is.na(DR2ITFAT) & !is.na(DR2ICHOL) & !is.na(DR2_030Z) & !is.na(DR2IGRMS))
amount_80 <- nrow(cleaned_dr2iff) * 0.80
indexes <- seq_len(nrow(cleaned_dr2iff))
train_indexes <- sample(indexes, size=amount_80)
train_set_80 <- cleaned_dr2iff[train_indexes, ]
test_set_20  <- cleaned_dr2iff[-train_indexes, ]
temp_cleaned_dr2iff <- cleaned_dr2iff
temp_cleaned_dr2iff$DR2_030Z <- as.factor(temp_cleaned_dr2iff$DR2_030Z)
ggplot(temp_cleaned_dr2iff, aes(x=DR2ICHOL, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + scale_color_discrete(name = "Original Data", labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 2
ggplot(temp_cleaned_dr2iff, aes(x=DR2ITFAT, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 100) + ylim(0, 1000) + scale_color_discrete(name = "Original Data", labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 3
ggplot(temp_cleaned_dr2iff, aes(x=DR2ISUGR, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 100) + ylim(0, 1000) + scale_color_discrete(name = "Original Data", labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 4
train_features <- train_set_80[, c("DR2ICHOL","DR2IGRMS","DR2ISUGR","DR2ITFAT")]
test_features <- test_set_20[, c("DR2ICHOL","DR2IGRMS","DR2ISUGR","DR2ITFAT")]
train_classes <- train_set_80$DR2_030Z
test_classes <- test_set_20$DR2_030Z
knn_classes_output <- knn(train=train_features, test=test_features, cl=train_classes, k=5)
confusion_mat <- table("Predicted Classes" = knn_classes_output, "Actual Classes" = test_classes)
#sum(knn_classes_output == test_classes) / length(test_classes)
#ggplot(test_set_20, aes(x=DR2ICHOL, y=DR2IGRMS, col=knn_classes_output)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + labs(col = "New Legend Name")
ggplot(test_set_20, aes(x=DR2ICHOL, y=DR2IGRMS, col=knn_classes_output)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + scale_color_discrete(
name = "Predict Class",
labels = c("Breakfast", "Lunch") # New legend values
)
# Chunk 5
temp_test_set_20 <- test_set_20
temp_test_set_20$DR2_030Z <- as.factor(temp_test_set_20$DR2_030Z)
ggplot(temp_test_set_20, aes(x=DR2ICHOL, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + scale_color_discrete(
name = "Actual  Class",
labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 6
cm_table <- as.data.frame(confusion_mat)
cm_table
# Chunk 1
#Import Libraries
library(haven)
library(ggplot2)
library(FNN)
library(dplyr)
library(plotly)
library(plyr)
library(GGally)
library(flexdashboard)
library(knitr)
set.seed(145)
# Import file
dr2iff <- read_xpt("DR2IFF_I.xpt")
#summary(dr2iff)
splitOccasion <- split(dr2iff, f=factor(dr2iff$DR2_030Z))
breakfastOccasion <- splitOccasion$"1"
lunchOccasion <- splitOccasion$"2"
dinnerOccasion <- splitOccasion$"3"
cleaned_dr2iff <- dr2iff[dr2iff$DR2_030Z <= 2, ]
cleaned_dr2iff <- cleaned_dr2iff %>% filter(!is.na(DR2ISUGR) & !is.na(DR2ITFAT) & !is.na(DR2ICHOL) & !is.na(DR2_030Z) & !is.na(DR2IGRMS))
amount_80 <- nrow(cleaned_dr2iff) * 0.80
indexes <- seq_len(nrow(cleaned_dr2iff))
train_indexes <- sample(indexes, size=amount_80)
train_set_80 <- cleaned_dr2iff[train_indexes, ]
test_set_20  <- cleaned_dr2iff[-train_indexes, ]
temp_cleaned_dr2iff <- cleaned_dr2iff
temp_cleaned_dr2iff$DR2_030Z <- as.factor(temp_cleaned_dr2iff$DR2_030Z)
ggplot(temp_cleaned_dr2iff, aes(x=DR2ICHOL, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + scale_color_discrete(name = "Original Data", labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 2
ggplot(temp_cleaned_dr2iff, aes(x=DR2ITFAT, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 100) + ylim(0, 1000) + scale_color_discrete(name = "Original Data", labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 3
ggplot(temp_cleaned_dr2iff, aes(x=DR2ISUGR, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 100) + ylim(0, 1000) + scale_color_discrete(name = "Original Data", labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 4
train_features <- train_set_80[, c("DR2ICHOL","DR2IGRMS","DR2ISUGR","DR2ITFAT")]
test_features <- test_set_20[, c("DR2ICHOL","DR2IGRMS","DR2ISUGR","DR2ITFAT")]
train_classes <- train_set_80$DR2_030Z
test_classes <- test_set_20$DR2_030Z
knn_classes_output <- knn(train=train_features, test=test_features, cl=train_classes, k=5)
confusion_mat <- table("Predicted Classes" = knn_classes_output, "Actual Classes" = test_classes)
#sum(knn_classes_output == test_classes) / length(test_classes)
#ggplot(test_set_20, aes(x=DR2ICHOL, y=DR2IGRMS, col=knn_classes_output)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + labs(col = "New Legend Name")
ggplot(test_set_20, aes(x=DR2ICHOL, y=DR2IGRMS, col=knn_classes_output)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + scale_color_discrete(
name = "Predict Class",
labels = c("Breakfast", "Lunch") # New legend values
)
# Chunk 5
temp_test_set_20 <- test_set_20
temp_test_set_20$DR2_030Z <- as.factor(temp_test_set_20$DR2_030Z)
ggplot(temp_test_set_20, aes(x=DR2ICHOL, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + scale_color_discrete(
name = "Actual  Class",
labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 6
cm_table <- as.data.frame(confusion_mat)
colnames(cm_table) <- c("Prediction", "Reference", "Frequency")
# Chunk 1
#Import Libraries
library(haven)
library(ggplot2)
library(FNN)
library(dplyr)
library(plotly)
library(plyr)
library(GGally)
library(flexdashboard)
library(knitr)
set.seed(145)
# Import file
dr2iff <- read_xpt("DR2IFF_I.xpt")
#summary(dr2iff)
splitOccasion <- split(dr2iff, f=factor(dr2iff$DR2_030Z))
breakfastOccasion <- splitOccasion$"1"
lunchOccasion <- splitOccasion$"2"
dinnerOccasion <- splitOccasion$"3"
cleaned_dr2iff <- dr2iff[dr2iff$DR2_030Z <= 2, ]
cleaned_dr2iff <- cleaned_dr2iff %>% filter(!is.na(DR2ISUGR) & !is.na(DR2ITFAT) & !is.na(DR2ICHOL) & !is.na(DR2_030Z) & !is.na(DR2IGRMS))
amount_80 <- nrow(cleaned_dr2iff) * 0.80
indexes <- seq_len(nrow(cleaned_dr2iff))
train_indexes <- sample(indexes, size=amount_80)
train_set_80 <- cleaned_dr2iff[train_indexes, ]
test_set_20  <- cleaned_dr2iff[-train_indexes, ]
temp_cleaned_dr2iff <- cleaned_dr2iff
temp_cleaned_dr2iff$DR2_030Z <- as.factor(temp_cleaned_dr2iff$DR2_030Z)
ggplot(temp_cleaned_dr2iff, aes(x=DR2ICHOL, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + scale_color_discrete(name = "Original Data", labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 2
ggplot(temp_cleaned_dr2iff, aes(x=DR2ITFAT, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 100) + ylim(0, 1000) + scale_color_discrete(name = "Original Data", labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 3
ggplot(temp_cleaned_dr2iff, aes(x=DR2ISUGR, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 100) + ylim(0, 1000) + scale_color_discrete(name = "Original Data", labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 4
train_features <- train_set_80[, c("DR2ICHOL","DR2IGRMS","DR2ISUGR","DR2ITFAT")]
test_features <- test_set_20[, c("DR2ICHOL","DR2IGRMS","DR2ISUGR","DR2ITFAT")]
train_classes <- train_set_80$DR2_030Z
test_classes <- test_set_20$DR2_030Z
knn_classes_output <- knn(train=train_features, test=test_features, cl=train_classes, k=5)
confusion_mat <- table("Predicted Classes" = knn_classes_output, "Actual Classes" = test_classes)
#sum(knn_classes_output == test_classes) / length(test_classes)
#ggplot(test_set_20, aes(x=DR2ICHOL, y=DR2IGRMS, col=knn_classes_output)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + labs(col = "New Legend Name")
ggplot(test_set_20, aes(x=DR2ICHOL, y=DR2IGRMS, col=knn_classes_output)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + scale_color_discrete(
name = "Predict Class",
labels = c("Breakfast", "Lunch") # New legend values
)
# Chunk 5
temp_test_set_20 <- test_set_20
temp_test_set_20$DR2_030Z <- as.factor(temp_test_set_20$DR2_030Z)
ggplot(temp_test_set_20, aes(x=DR2ICHOL, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + scale_color_discrete(
name = "Actual  Class",
labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 6
confusion_mat_df <- as.data.frame(confusion_mat)
colnames(confusion_mat_df) <- c("Prediction", "Reference", "Amount")
kable(cm_table, caption = "Confusion Matrix") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
column_spec(1, bold = TRUE) %>%
column_spec(2, bold = TRUE) %>%
row_spec(0, bold = TRUE)
# Chunk 1
#Import Libraries
library(haven)
library(ggplot2)
library(FNN)
library(dplyr)
library(plotly)
library(plyr)
library(GGally)
library(flexdashboard)
library(knitr)
set.seed(145)
# Import file
dr2iff <- read_xpt("DR2IFF_I.xpt")
#summary(dr2iff)
splitOccasion <- split(dr2iff, f=factor(dr2iff$DR2_030Z))
breakfastOccasion <- splitOccasion$"1"
lunchOccasion <- splitOccasion$"2"
dinnerOccasion <- splitOccasion$"3"
cleaned_dr2iff <- dr2iff[dr2iff$DR2_030Z <= 2, ]
cleaned_dr2iff <- cleaned_dr2iff %>% filter(!is.na(DR2ISUGR) & !is.na(DR2ITFAT) & !is.na(DR2ICHOL) & !is.na(DR2_030Z) & !is.na(DR2IGRMS))
amount_80 <- nrow(cleaned_dr2iff) * 0.80
indexes <- seq_len(nrow(cleaned_dr2iff))
train_indexes <- sample(indexes, size=amount_80)
train_set_80 <- cleaned_dr2iff[train_indexes, ]
test_set_20  <- cleaned_dr2iff[-train_indexes, ]
temp_cleaned_dr2iff <- cleaned_dr2iff
temp_cleaned_dr2iff$DR2_030Z <- as.factor(temp_cleaned_dr2iff$DR2_030Z)
ggplot(temp_cleaned_dr2iff, aes(x=DR2ICHOL, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + scale_color_discrete(name = "Original Data", labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 2
ggplot(temp_cleaned_dr2iff, aes(x=DR2ITFAT, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 100) + ylim(0, 1000) + scale_color_discrete(name = "Original Data", labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 3
ggplot(temp_cleaned_dr2iff, aes(x=DR2ISUGR, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 100) + ylim(0, 1000) + scale_color_discrete(name = "Original Data", labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 4
train_features <- train_set_80[, c("DR2ICHOL","DR2IGRMS","DR2ISUGR","DR2ITFAT")]
test_features <- test_set_20[, c("DR2ICHOL","DR2IGRMS","DR2ISUGR","DR2ITFAT")]
train_classes <- train_set_80$DR2_030Z
test_classes <- test_set_20$DR2_030Z
knn_classes_output <- knn(train=train_features, test=test_features, cl=train_classes, k=5)
confusion_mat <- table("Predicted Classes" = knn_classes_output, "Actual Classes" = test_classes)
#sum(knn_classes_output == test_classes) / length(test_classes)
#ggplot(test_set_20, aes(x=DR2ICHOL, y=DR2IGRMS, col=knn_classes_output)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + labs(col = "New Legend Name")
ggplot(test_set_20, aes(x=DR2ICHOL, y=DR2IGRMS, col=knn_classes_output)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + scale_color_discrete(
name = "Predict Class",
labels = c("Breakfast", "Lunch") # New legend values
)
# Chunk 5
temp_test_set_20 <- test_set_20
temp_test_set_20$DR2_030Z <- as.factor(temp_test_set_20$DR2_030Z)
ggplot(temp_test_set_20, aes(x=DR2ICHOL, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + scale_color_discrete(
name = "Actual  Class",
labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 6
confusion_mat_df <- as.data.frame(confusion_mat)
colnames(confusion_mat_df) <- c("Prediction", "Reference", "Amount")
kable(cm_table, caption = "Confusion Matrix") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
column_spec(1, bold = TRUE) %>%
column_spec(2, bold = TRUE)
# Chunk 1
#Import Libraries
library(haven)
library(ggplot2)
library(FNN)
library(dplyr)
library(plotly)
library(plyr)
library(GGally)
library(flexdashboard)
library(knitr)
set.seed(145)
# Import file
dr2iff <- read_xpt("DR2IFF_I.xpt")
#summary(dr2iff)
splitOccasion <- split(dr2iff, f=factor(dr2iff$DR2_030Z))
breakfastOccasion <- splitOccasion$"1"
lunchOccasion <- splitOccasion$"2"
dinnerOccasion <- splitOccasion$"3"
cleaned_dr2iff <- dr2iff[dr2iff$DR2_030Z <= 2, ]
cleaned_dr2iff <- cleaned_dr2iff %>% filter(!is.na(DR2ISUGR) & !is.na(DR2ITFAT) & !is.na(DR2ICHOL) & !is.na(DR2_030Z) & !is.na(DR2IGRMS))
amount_80 <- nrow(cleaned_dr2iff) * 0.80
indexes <- seq_len(nrow(cleaned_dr2iff))
train_indexes <- sample(indexes, size=amount_80)
train_set_80 <- cleaned_dr2iff[train_indexes, ]
test_set_20  <- cleaned_dr2iff[-train_indexes, ]
temp_cleaned_dr2iff <- cleaned_dr2iff
temp_cleaned_dr2iff$DR2_030Z <- as.factor(temp_cleaned_dr2iff$DR2_030Z)
ggplot(temp_cleaned_dr2iff, aes(x=DR2ICHOL, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + scale_color_discrete(name = "Original Data", labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 2
ggplot(temp_cleaned_dr2iff, aes(x=DR2ITFAT, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 100) + ylim(0, 1000) + scale_color_discrete(name = "Original Data", labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 3
ggplot(temp_cleaned_dr2iff, aes(x=DR2ISUGR, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 100) + ylim(0, 1000) + scale_color_discrete(name = "Original Data", labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 4
train_features <- train_set_80[, c("DR2ICHOL","DR2IGRMS","DR2ISUGR","DR2ITFAT")]
test_features <- test_set_20[, c("DR2ICHOL","DR2IGRMS","DR2ISUGR","DR2ITFAT")]
train_classes <- train_set_80$DR2_030Z
test_classes <- test_set_20$DR2_030Z
knn_classes_output <- knn(train=train_features, test=test_features, cl=train_classes, k=5)
confusion_mat <- table("Predicted Classes" = knn_classes_output, "Actual Classes" = test_classes)
#sum(knn_classes_output == test_classes) / length(test_classes)
#ggplot(test_set_20, aes(x=DR2ICHOL, y=DR2IGRMS, col=knn_classes_output)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + labs(col = "New Legend Name")
ggplot(test_set_20, aes(x=DR2ICHOL, y=DR2IGRMS, col=knn_classes_output)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + scale_color_discrete(
name = "Predict Class",
labels = c("Breakfast", "Lunch") # New legend values
)
# Chunk 5
temp_test_set_20 <- test_set_20
temp_test_set_20$DR2_030Z <- as.factor(temp_test_set_20$DR2_030Z)
ggplot(temp_test_set_20, aes(x=DR2ICHOL, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + scale_color_discrete(
name = "Actual  Class",
labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 6
confusion_mat_df <- as.data.frame(confusion_mat)
colnames(confusion_mat_df) <- c("Prediction", "Reference", "Amount")
kable(cm_table, caption = "Confusion Matrix") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
# Chunk 1
#Import Libraries
library(haven)
library(ggplot2)
library(FNN)
library(dplyr)
library(plotly)
library(plyr)
library(GGally)
library(flexdashboard)
library(knitr)
library(kableExtra)
set.seed(145)
# Import file
dr2iff <- read_xpt("DR2IFF_I.xpt")
#summary(dr2iff)
splitOccasion <- split(dr2iff, f=factor(dr2iff$DR2_030Z))
breakfastOccasion <- splitOccasion$"1"
lunchOccasion <- splitOccasion$"2"
dinnerOccasion <- splitOccasion$"3"
cleaned_dr2iff <- dr2iff[dr2iff$DR2_030Z <= 2, ]
cleaned_dr2iff <- cleaned_dr2iff %>% filter(!is.na(DR2ISUGR) & !is.na(DR2ITFAT) & !is.na(DR2ICHOL) & !is.na(DR2_030Z) & !is.na(DR2IGRMS))
amount_80 <- nrow(cleaned_dr2iff) * 0.80
indexes <- seq_len(nrow(cleaned_dr2iff))
train_indexes <- sample(indexes, size=amount_80)
train_set_80 <- cleaned_dr2iff[train_indexes, ]
test_set_20  <- cleaned_dr2iff[-train_indexes, ]
temp_cleaned_dr2iff <- cleaned_dr2iff
temp_cleaned_dr2iff$DR2_030Z <- as.factor(temp_cleaned_dr2iff$DR2_030Z)
ggplot(temp_cleaned_dr2iff, aes(x=DR2ICHOL, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + scale_color_discrete(name = "Original Data", labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 2
ggplot(temp_cleaned_dr2iff, aes(x=DR2ITFAT, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 100) + ylim(0, 1000) + scale_color_discrete(name = "Original Data", labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 3
ggplot(temp_cleaned_dr2iff, aes(x=DR2ISUGR, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 100) + ylim(0, 1000) + scale_color_discrete(name = "Original Data", labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 4
train_features <- train_set_80[, c("DR2ICHOL","DR2IGRMS","DR2ISUGR","DR2ITFAT")]
test_features <- test_set_20[, c("DR2ICHOL","DR2IGRMS","DR2ISUGR","DR2ITFAT")]
train_classes <- train_set_80$DR2_030Z
test_classes <- test_set_20$DR2_030Z
knn_classes_output <- knn(train=train_features, test=test_features, cl=train_classes, k=5)
confusion_mat <- table("Predicted Classes" = knn_classes_output, "Actual Classes" = test_classes)
#sum(knn_classes_output == test_classes) / length(test_classes)
#ggplot(test_set_20, aes(x=DR2ICHOL, y=DR2IGRMS, col=knn_classes_output)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + labs(col = "New Legend Name")
ggplot(test_set_20, aes(x=DR2ICHOL, y=DR2IGRMS, col=knn_classes_output)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + scale_color_discrete(
name = "Predict Class",
labels = c("Breakfast", "Lunch") # New legend values
)
# Chunk 5
temp_test_set_20 <- test_set_20
temp_test_set_20$DR2_030Z <- as.factor(temp_test_set_20$DR2_030Z)
ggplot(temp_test_set_20, aes(x=DR2ICHOL, y=DR2IGRMS, col=DR2_030Z)) + geom_point() + xlim(0, 1000) + ylim(0, 1000) + scale_color_discrete(
name = "Actual  Class",
labels = c("Breakfast", "Lunch")) # New legend values
# Chunk 6
confusion_mat_df <- as.data.frame(confusion_mat)
colnames(confusion_mat_df) <- c("Prediction", "Reference", "Amount")
kable(cm_table, caption = "Confusion Matrix")
